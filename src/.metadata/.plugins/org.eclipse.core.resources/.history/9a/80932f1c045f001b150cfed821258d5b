package utils;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class XLUtils 
{
	public static FileInputStream fi;
	public static Workbook wb;
	public static Sheet ws;
	public static Row r;
	public static Cell cell;
	public static FileOutputStream fo;
	public static CellStyle style;
	
public static int getRowCount(String xlfile,String xlsheet) throws IOException
{
	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	int rowcount =ws.getLastRowNum();
	wb.close();
	fi.close();
	return rowcount;
	
}
public static short getcolumncount(String xlfile,String xlsheet,int rownum) throws IOException
{
	FileInputStream fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
    r=ws.getRow(rownum);
    short columncount= r.getLastCellNum();
    wb.close();
    fi.close();
    return columncount;
	
	
	
	
}	
public static String getStringcellData(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
{
	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	r=ws.getRow(rownum);
	String data;
	try {
		cell=r.getCell(colnum);
		data=cell.getStringCellValue();
		
	}catch(Exception e)
	{
		data="";
	}
	wb.close();
	fi.close();
	return data;
	
	
	

}	

public static double getNumericcellData(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
{
	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	r=ws.getRow(rownum);
	double data;
	try {
		cell=r.getCell(colnum);
		data=cell.getNumericCellValue();
		
	}catch(Exception e)
	{
		data=0;
	}
	wb.close();
	fi.close();
	return data;
	
	
	
}

public static boolean getbooleancellData(String xlfile, String xlsheet, int rownum, int colnum) throws IOException
{
	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	r=ws.getRow(rownum);
	boolean data;
	try {
	
	cell=r.getCell(colnum);
	data=cell.getBooleanCellValue();
	}catch(Exception e)
	{
		data=false;
	}
	wb.close();
	fi.close();
	return  data;
	
}
public static void setcellData(String xlfile,String xlsheet,int rownum,int colnum,String data ) throws IOException
{

	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	r=ws.getRow(rownum);
	cell=r.createCell(colnum);
	cell.setCellValue(data);
	fo=new FileOutputStream(xlfile);
	wb.write(fo);
	wb.close();
	fi.close();
	fo.close();
	
	
}
public static void fillGreencolor(String xlfile,String xlsheet,int rownum,int colnum ) throws IOException
{
	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	r=ws.getRow(rownum);
	cell=r.getCell(colnum);
	style=wb.createCellStyle();
	style.setFillForegroundColor(IndexedColors.GREEN.getIndex() );
	style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	cell.setCellStyle(style);
	fo=new FileOutputStream(xlfile);
	wb.write(fo);
	wb.close();
	fi.close();
	fo.close();	
}
public static void fillRedcolor(String xlfile,String xlsheet,int rownum,int colnum) throws IOException	
{
	fi=new FileInputStream(xlfile);
	wb=new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet);
	r=ws.getRow(rownum);
	cell=r.getCell(colnum);
	style=wb.createCellStyle();
	style.setFillForegroundColor(IndexedColors.RED.getIndex() );
	style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	cell.setCellStyle(style);
	fo=new FileOutputStream(xlfile);
	wb.write(fo);
	wb.close();
	fi.close();
	fo.close();	
	
	
	
	
}


}
